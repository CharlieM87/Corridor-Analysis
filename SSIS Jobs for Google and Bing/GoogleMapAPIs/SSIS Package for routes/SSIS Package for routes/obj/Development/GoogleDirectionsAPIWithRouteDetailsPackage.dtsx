<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/5/2016 4:54:44 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ISSUSLAP1350"
  DTS:CreatorName="ISOFTSTONE\harisham"
  DTS:DTSID="{392BEF8D-23B5-473E-92F6-8FADC8EF41B5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="13.0.2165.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="GoogleDirectionsAPIWithRouteDetailsPackage"
  DTS:PackageType="5"
  DTS:VersionBuild="116"
  DTS:VersionGUID="{2C6DF43E-54CD-48A2-93EA-8B8707DBA8FA}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5157CE35-774D-4B96-BCA5-39C0EDE37E1D}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CreatedDate">
      <DTS:VariableValue
        DTS:DataType="7">5/17/2017 11:18:56 AM</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{B6FE293D-0D86-471D-A2F0-E455C1A75E62}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\Call SP for each address"
              componentClassID="Microsoft.OLEDBCommand"
              contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
              name="Call SP for each address"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">exec sp_CallInsertDirectionAPIResultSets ?,?,?,?,?</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\Call SP for each address.Connections[OleDbConnection]"
                  connectionManagerID="{6DD2FAB4-D7C7-437D-A7F8-A0CAAA3AF3D0}:external"
                  connectionManagerRefId="Project.ConnectionManagers[DB.WebService_Example]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input]"
                  errorOrTruncationOperation="Command Execution"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Command Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].Columns[TransitMode]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="20"
                      cachedName="TransitMode"
                      externalMetadataColumnId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@TransitMode]"
                      lineageId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[TransitMode]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].Columns[URL]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="6000"
                      cachedName="URL"
                      externalMetadataColumnId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@URL]"
                      lineageId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[URL]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].Columns[Waypoints]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="1000"
                      cachedName="Waypoints"
                      externalMetadataColumnId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@WayPoints]"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Waypoints]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].Columns[DirectionsResponseXMLString]"
                      cachedDataType="nText"
                      cachedName="DirectionsResponseXMLString"
                      externalMetadataColumnId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@xml]"
                      lineageId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[DirectionsResponseXMLString]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].Columns[RouteID]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="RouteID"
                      externalMetadataColumnId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@RouteID]"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[RouteID]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@TransitMode]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      name="@TransitMode">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@URL]"
                      codePage="1252"
                      dataType="str"
                      length="6000"
                      name="@URL">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@WayPoints]"
                      codePage="1252"
                      dataType="str"
                      length="3000"
                      name="@WayPoints">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@xml]"
                      dataType="nText"
                      name="@xml">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">193</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input].ExternalColumns[@RouteID]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="@RouteID">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Call SP for each address.Outputs[OLE DB Command Output]"
                  exclusionGroup="1"
                  name="OLE DB Command Output"
                  synchronousInputId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Data Flow Task\Call SP for each address.Outputs[OLE DB Command Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Command Error Output"
                  synchronousInputId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Call SP for each address.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Call SP for each address.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\Call SP for each address.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Call SP for each address.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Read from Google MAP API"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;10"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Read from Google MAP API"
              version="9">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_2d7461202e664805b7795f017a6f1858")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_2d7461202e664805b7795f017a6f1858")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using System.Web;
using System.Windows.Forms;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Runtime;
using System.Net;
using System.Xml;
using System.Text;


#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        // Create a new web client 
        WebClient wc = new WebClient();

        // Select your mode of transport - Edit the var in SSIS
        String TransportMode = Variables.ModeOfTransportPP;

        // Add reference to your API
        String APIKey = Variables.DistanceAPIKeyPP;

        TimeSpan span = DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1, 0, 0, 0));

        // Build the URL that is to be requested
        String uri = "https://maps.googleapis.com/maps/api/directions/xml?units=imperial&origin=" + Row.StartingAddress + "&destination=" + Row.EndingAddress + "&waypoints=" + Row.Waypoints + "&key=" + APIKey + "&mode=" + Variables.ModeOfTransportPP +  "&departure_time=now" + "&traffic_model=best_guess"; 


        // Get the XML
        string directionsInfo = wc.DownloadString(uri);
        XmlDocument xmlDoc = new XmlDocument();        
        xmlDoc.LoadXml(directionsInfo);

        // Shred the XML
        //String Duration = Convert.ToString(xmlDoc.SelectSingleNode("DirectionsResponse/route/leg/duration/text").InnerText);
        //String Distance = Convert.ToString(xmlDoc.SelectSingleNode("DirectionsResponse/route/leg/distance/text").InnerText);
        //String Fare = Convert.ToString(xmlDoc.SelectSingleNode("DistanceMatrixResponse/row/element/fare/text").InnerText);

        XmlNode root = xmlDoc.DocumentElement;

        // Update the outgoing rows. 
       // Row.TimeAsText = Duration;
       // Row.DistanceAsText = Distance;
        Row.TransitMode = TransportMode;
        Row.CreatedDate = Variables.CreatedDate;
        Row.URL = uri;

        //Convert the xml string to Blob and assign       
        // Get the string to save
        string toConvert = root.OuterXml.ToString();
        //MessageBox.Show(toConvert);
        //
        // convert it to blob/byte data
        byte[] blobData = System.Text.Encoding.GetEncoding(1252).GetBytes(toConvert);
        //
        // and update the field 
        Row.DirectionsResponseXMLString.AddBlobData(blobData);

        //
        // Short cut syntax
        //Row.DirectionsResponseXMLString.AddBlobData(Encoding.GetEncoding(1252).GetBytes(json.Serialize(attrs)));
        //Row.DirectionsResponseXMLString = root.OuterXml.ToString();


    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String StartingAddress
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool StartingAddress_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String EndingAddress
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
    }
    public bool EndingAddress_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String Waypoints
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
    }
    public bool Waypoints_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String RouteID
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
    }
    public bool RouteID_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String URL
    {
        set
        {
            this[4] = value;
        }
    }
    public bool URL_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TransitMode
    {
        set
        {
            this[5] = value;
        }
    }
    public bool TransitMode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime CreatedDate
    {
        set
        {
            this[6] = value;
        }
    }
    public bool CreatedDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public BlobColumn DirectionsResponseXMLString
    {
        get
        {
            return (BlobColumn)Buffer[BufferColumnIndexes[7]];
        }
        set
        {
            this[7] = value;
        }
    }
    public bool DirectionsResponseXMLString_IsNull
    {
        get
        {
            return IsNull(7);
        }
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2d7461202e664805b7795f017a6f1858.Properties.Settings.get_Default():SC_2d7461202e664805b7795f017a6f1858.Properties.Sett" +
    "ings")]

namespace SC_2d7461202e664805b7795f017a6f1858.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public DateTime CreatedDate
    {
        get
        {
            return (DateTime)(ParentComponent.ReadOnlyVariables["CreatedDate"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String DistanceAPIKeyPP
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["DistanceAPIKey_PP"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String ModeOfTransportPP
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["ModeOfTransport_PP"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_2d7461202e664805b7795f017a6f1858</msb:CodeName>
		<msb:DisplayName>SC_2d7461202e664805b7795f017a6f1858</msb:DisplayName>
		<msb:ProjectId>{1568B68D-97BA-4587-8913-9E4015B87A79}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_2d7461202e664805b7795f017a6f1858.csproj"/>
		<msb:Folder Include="Service References\"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:Breakpoint Include="32d47e1f62674cf2bee0b04d19c41f06">
			<msb:FileName>main.cs</msb:FileName>
			<msb:LineNumber>132</msb:LineNumber>
			<msb:ColumnNumber>9</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_2d7461202e664805b7795f017a6f1858.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{B032EA52-16DB-4147-80BF-755DEE33E99C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_2d7461202e664805b7795f017a6f1858</RootNamespace>
    <AssemblyName>SC_2d7461202e664805b7795f017a6f1858</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2d7461202e664805b7795f017a6f1858.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2d7461202e664805b7795f017a6f1858.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2d7461202e664805b7795f017a6f1858.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_2d7461202e664805b7795f017a6f1858.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_2d7461202e664805b7795f017a6f1858.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_2d7461202e664805b7795f017a6f1858.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAAqUHFkAAAAAAAAAAOAAIiALATAAAB4AAAAIAAAAAAAAJjwA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAANQ7AABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAALBwAAAAgAAAAHgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAgAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAI
PAAAAAAAAEgAAAACAAUADCQAABAXAAABAAAAAAAAABw7AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACioTMAcADwEAAAEAABFzEgAACgoC
ewIAAARvIgAABgsCewIAAARvIQAABgwoEwAAChMHEgcgsgcAABcXFhYWcxQAAAooFQAACiYfC40e
AAABJRZyAQAAcKIlFwNvBgAABqIlGHKYAABwoiUZA28IAAAGoiUacrQAAHCiJRsDbwoAAAaiJRxy
zAAAcKIlHQiiJR5y2AAAcKIlHwkCewIAAARvIgAABqIlHwpy5gAAcKIoFgAACg0GCW8XAAAKEwRz
GAAACiURBG8ZAAAKbxoAAAoDB28QAAAGAwJ7AgAABG8gAAAGbxIAAAYDCW8OAAAGbxsAAApvHAAA
ChMFIOQEAAAoHQAAChEFbx4AAAoTBgNvFAAABhEGbx8AAAoqHgIoGgAABioqAgMEBSggAAAKKlIC
eyEAAAoCeyIAAAoWlG8jAAAKKiICFigkAAAKKlICeyEAAAoCeyIAAAoXlG8jAAAKKiICFygkAAAK
KlICeyEAAAoCeyIAAAoYlG8jAAAKKiICGCgkAAAKKlICeyEAAAoCeyIAAAoZlG8jAAAKKiICGSgk
AAAKKiYCGgMoJQAACipaAywIAhooJgAACipyQAEAcHMnAAAKeiYCGwMoJQAACipaAywIAhsoJgAA
CipyQAEAcHMnAAAKejoCHAOMDwAAASglAAAKKloDLAgCHCgmAAAKKnJAAQBwcycAAAp6ZgJ7IQAA
CgJ7IgAACh2UbygAAAp0EwAAASomAh0DKCUAAAoqIgIdKCQAAAoqWgMsCAIdKCYAAAoqckABAHBz
JwAACnoeAigpAAAKKh4CKCoAAAoqfgIoKwAACgICcx4AAAZ9AQAABAICcx8AAAZ9AgAABCqSBHLd
AQBwGm8sAAAKLBUCBQIDKC0AAAoOBHMFAAAGbxwAAAYqSisHAgNvHQAABgNvGAAABi3xKgYqOgIo
LgAACgIDfQMAAAQqOgIoLgAACgIDfQQAAAQqlgJ7BAAABG8vAAAKcu0BAHBvMAAACigxAAAKbzIA
AAqlDwAAASqWAnsEAAAEby8AAApyBQIAcG8wAAAKKDEAAApvMgAACnQeAAABKpYCewQAAARvLwAA
CnIpAgBwbzAAAAooMQAACm8yAAAKdB4AAAEqHgIoLgAACiqufgUAAAQtHnJPAgBw0AcAAAIoMwAA
Cm80AAAKczUAAAqABQAABH4FAAAEKhp+BgAABCoeAoAGAAAEKhp+BwAABCoeAig2AAAKKi5zKAAA
BoAHAAAEKgAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAJAgAACN+AACQCAAA
gAkAACNTdHJpbmdzAAAAABASAADEAgAAI1VTANQUAAAQAAAAI0dVSUQAAADkFAAALAIAACNCbG9i
AAAAAAAAAAIAAAFXFaIBCQEAAAD6ATMAFgAAAQAAACsAAAAIAAAABwAAACkAAAAVAAAANgAAABAA
AAABAAAABAAAABYAAAAZAAAAAQAAAAYAAAABAAAAAAAWBAEAAAAAAAYAqQLEBgYAPQPEBgYA9QGx
Bg8AOAcAAAYAIgK7BQYAjAK7BQYAbQK7BQYAJAO7BQYAyQK7BQYA4gK7BQYAOQK7BQYAVAKEAwoA
/QIiAQ4ARAghCAYAGQFfBQoAWwYiARIATAYiAQoABAYiARIAhgUiAQoAlwgiAQYAGghfBQYA2AGx
BgYAbAbkBgYA+AWmBQ4AqAEABA4ACQIABA4AcAGRBQYAvQHEBgYAcgVfBQYA+QNfBRYAbQgtBRYA
TggtBRYA4wAtBQYAewP5CAYAzQVfBQYA5wVfBRoAEQB8BhoAAQB8BlMAGQkAABoAIgB8BgYAQwFf
BQYA6wBfBQYAdwm7BQAAAABeAAAAAAABAAEAAQAQAHsFAAAQAAEAAQABABAAPwYAAEEAAQAFAAEA
EAB5CAAAUQABABoAAQAQAMoHAABVAAMAHgABABAAggcAAFUABAAfAAAAEADrBkcHVQAFACMAAAEQ
ALoHRwdtAAcAJwAGAMoH4wAGAIIH5wABAIcI6wABAIcI6wARAGYF7wARAGAB8wARAMMA9wBQIAAA
AADGAFsDBgABAFggAAAAAMYAZgMGAAEAYCAAAAAAxgBUCfsAAQB7IQAAAACGGKQGBgACAIMhAAAA
AIYYpAZnAAIAjiEAAAAAhgjoB1AABQCjIQAAAACGCPUEjgAFAKwhAAAAAIYI1gdQAAUAwSEAAAAA
hgjcBI4ABQDKIQAAAACGCPwHUAAFAN8hAAAAAIYIEAWOAAUA6CEAAAAAhghnAFAABQD9IQAAAACG
CD4EjgAFAAYiAAAAAIYIewAQAAUAECIAAAAAhghRBAEBBgAnIgAAAACGCNMAEAAHADEiAAAAAIYI
YAQBAQgASCIAAAAAhgiYAQYBCQBXIgAAAACGCHcEAQEKAG4iAAAAAIYIngMMAQsAiCIAAAAAhgi+
AxEBCwCSIgAAAACGCI4EjgAMAJsiAAAAAIYItQQBAQwAsiIAAAAAhgBrCY4ADQC6IgAAAACGACwI
jgANAMIiAAAAAIYYpAYGAA0A4iIAAAAAxgDsCBcBDQAHIwAAAADGAeUI+wARABojAAAAAMYBVAn7
ABIAHCMAAAAAhhikBiEBEwArIwAAAACGGKQGIQEUADojAAAAAIYIiAEnARUAYCMAAAAAhgiZAFAA
FQCGIwAAAACGCIMAUAAVAKwjAAAAAIMYpAYGABUAtCMAAAAAkwhoBiwBFQDgIwAAAACTCEgBMQEV
AOcjAAAAAJMIVAE2ARUA7yMAAAAAlgg4CDwBFgD2IwAAAACGGKQGBgAWAP4jAAAAAJEYqgZBARYA
AAABAG8JAAABAGEGAAACAJUHAAADABIGAAABAHIDAAABAHIDAAABAHIDAAABAHIDAAABAHIDAAAB
AHIDAAABAHIDAAABAHIDAAABAHMAAAACAA8BAAADAGEGAAAEABIGAAABAGEGAAABAG8JAAABAJ0I
AAABAJ0IAAABAHIDCQCkBgEAEQCkBgYAGQCkBgoAKQCkBhAAMQCkBhAAOQCkBhAAQQCkBhAASQCk
BhAAUQCkBhAAWQCkBhAAYQCkBhAAaQCkBgYAsQCkBgYA0QCkBhUA4QCkBgYAoQBbAwYAoQBmAwYA
cQCkBgYAeQBJCSkAeQCkBi4AeQARCDgA8QAKCD8AcQDeA0UA+QCkBgYA+QA4BRAA+QBZCEoACQFA
BVAAqQDtA1AAEQF4A1QAEQGMB1sAmQCuAGEAgQCkBmcAgQBhBnEAgQCVB3UAiQD2A3kAgQAeBX4A
gQBWBYMAgQAlBQEAGQGkBhAAiQBNBYkAgQBrCY4AgQAsCI4AoQCkBgYA8QDDB5IAoQCpB5oAqQCk
BgYAoQB2B6AAKQFNBaYAoQA0Ca0AMQEFCbMASQH9ALoASQFzCcMAuQCkBskA2QCkBgYALgALAGYB
LgATAG8BLgAbAI4BLgAjAJcBLgArAMABLgAzAMABLgA7AMABLgBDAJcBLgBLAMYBLgBTAMABLgBb
AN0BQwBjACcC4QB7ACcC4wBrACcCiQJzAI4BqQJzAI4BGwADAAEABgARAAcAFAAIABYAAADsB0UB
AAD5BEkBAADaB0UBAADgBEkBAAAACEUBAAAUBUkBAABrAEUBAABCBEkBAAB/AEUBAABVBEkBAADX
AEUBAABkBEkBAACcAU0BAAB7BEkBAADCA1IBAAC5BEkBAACcAU0BAACdAEUBAACHAEUBAABsBlcB
AABoAVwBAAA8CGEBAgAGAAMAAgAHAAUAAgAIAAcAAgAJAAkAAgAKAAsAAgALAA0AAgAMAA8AAgAN
ABEAAQAOABMAAQAPABUAAQAQABcAAQARABkAAQASABsAAQATAB0AAgAUAB8AAQAVAB8AAgAWACEA
AQAXACEAAgAgACMAAgAhACUAAgAiACcAAgAkACkAAgAlACsAAQAmACsAAgAnAC0ABIAAAAEAAAAA
AAAAAAAAAAAAOgAAAAQAAAAAAAAAAAAAANEAugAAAAAADAAAAAAAAAAAAAAA2gCnCAAAAAAEAAAA
AAAAAAAAAADRAF8FAAAAAAwAAAAAAAAAAAAAANoAxAgAAAAABAAAAAAAAAAAAAAA0QAtBQAAAAAM
AAAAAAAAAAAAAADaABwGAAAAAAAAAAABAAAA9QYAAAAAAAAASURUU1ZhcmlhYmxlMTAwAElEVFNW
YXJpYWJsZXMxMDAASURUU0V2YWx1YXRvckNvbnRleHQxMDAAU0NfMmQ3NDYxMjAyZTY2NDgwNWI3
Nzk1ZjAxN2E2ZjE4NTgAPE1vZHVsZT4AZ2V0X1JvdXRlSUQASW5wdXRJRABzZXRfVVJMAGdldF9N
b2RlT2ZUcmFuc3BvcnRQUABnZXRfRGlzdGFuY2VBUElLZXlQUABBZGRCbG9iRGF0YQBtc2Nvcmxp
YgBkZWZhdWx0SW5zdGFuY2UAc2V0X1RyYW5zaXRNb2RlAFhtbE5vZGUAUnVudGltZVR5cGVIYW5k
bGUAR2V0VHlwZUZyb21IYW5kbGUASW5wdXROYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlBpcGVsaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0
dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAGdldF9DcmVhdGVkRGF0ZQBzZXRfQ3JlYXRlZERh
dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdn
ZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJs
ZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmli
dXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1
dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0
cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0
ZQBTU0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlB
dHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhl
Y3V0ZQB2YWx1ZQBHZXRFbmNvZGluZwBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAGdldF9EaXJl
Y3Rpb25zUmVzcG9uc2VYTUxTdHJpbmcAc2V0X0RpcmVjdGlvbnNSZXNwb25zZVhNTFN0cmluZwBE
b3dubG9hZFN0cmluZwBUb1N0cmluZwBHZXRTdHJpbmcAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFND
XzJkNzQ2MTIwMmU2NjQ4MDViNzc5NWYwMTdhNmYxODU4LmRsbABnZXRfUm91dGVJRF9Jc051bGwA
c2V0X1VSTF9Jc051bGwAc2V0X1RyYW5zaXRNb2RlX0lzTnVsbABzZXRfQ3JlYXRlZERhdGVfSXNO
dWxsAGdldF9EaXJlY3Rpb25zUmVzcG9uc2VYTUxTdHJpbmdfSXNOdWxsAHNldF9EaXJlY3Rpb25z
UmVzcG9uc2VYTUxTdHJpbmdfSXNOdWxsAGdldF9FbmRpbmdBZGRyZXNzX0lzTnVsbABnZXRfU3Rh
cnRpbmdBZGRyZXNzX0lzTnVsbABnZXRfV2F5cG9pbnRzX0lzTnVsbABTZXROdWxsAFN5c3RlbS5Y
bWwATG9hZFhtbABnZXRfT3V0ZXJYbWwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lzdGVtAHJlc291cmNl
TWFuAFRpbWVTcGFuAFNjcmlwdE1haW4AQmxvYkNvbHVtbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBT
eXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBJbnZhbGlkT3BlcmF0aW9uRXhj
ZXB0aW9uAFN0cmluZ0NvbXBhcmlzb24AQ3VsdHVyZUluZm8AT3V0cHV0TmFtZU1hcABPdXRwdXRN
YXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNSdW50aW1lV3JhcABJbnB1dDBCdWZmZXIAUGlwZWxp
bmVCdWZmZXIAU2NyaXB0QnVmZmVyAGdldF9SZXNvdXJjZU1hbmFnZXIATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuUnVudGltZS5XcmFwcGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MA
U3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzJkNzQ2
MTIwMmU2NjQ4MDViNzc5NWYwMTdhNmYxODU4LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNl
cwBEZWJ1Z2dpbmdNb2RlcwBTQ18yZDc0NjEyMDJlNjY0ODA1Yjc3OTVmMDE3YTZmMTg1OC5Qcm9w
ZXJ0aWVzAGdldF9SZWFkT25seVZhcmlhYmxlcwBHZXRCeXRlcwBCdWZmZXJDb2x1bW5JbmRleGVz
AEdldENvbHVtbkluZGV4ZXMAU2V0dGluZ3MARXF1YWxzAENvbm5lY3Rpb25zAGdldF9FbmRpbmdB
ZGRyZXNzAGdldF9TdGFydGluZ0FkZHJlc3MAZ2V0X1dheXBvaW50cwBDb25jYXQAU3VidHJhY3QA
T2JqZWN0AFN5c3RlbS5OZXQARW5kT2ZSb3dzZXQAZ2V0X0RlZmF1bHQAV2ViQ2xpZW50AFhtbEVs
ZW1lbnQAZ2V0X0RvY3VtZW50RWxlbWVudABYbWxEb2N1bWVudABVc2VyQ29tcG9uZW50AFBhcmVu
dENvbXBvbmVudABTY3JpcHRDb21wb25lbnQATWljcm9zb2Z0LlNxbFNlcnZlci5UeFNjcmlwdABN
aWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9zdABJbnB1dDBfUHJvY2Vzc0lucHV0AFN5c3Rl
bS5UZXh0AEdldFZhbHVlV2l0aENvbnRleHQAU2NyaXB0Q29tcG9uZW50RXZhbENvbnRleHQAZ2V0
X0V2YWx1YXRvckNvbnRleHQAZ2V0X1V0Y05vdwBJbnB1dDBfUHJvY2Vzc0lucHV0Um93AE5leHRS
b3cAZ2V0X0Fzc2VtYmx5AACAlWgAdAB0AHAAcwA6AC8ALwBtAGEAcABzAC4AZwBvAG8AZwBsAGUA
YQBwAGkAcwAuAGMAbwBtAC8AbQBhAHAAcwAvAGEAcABpAC8AZABpAHIAZQBjAHQAaQBvAG4AcwAv
AHgAbQBsAD8AdQBuAGkAdABzAD0AaQBtAHAAZQByAGkAYQBsACYAbwByAGkAZwBpAG4APQAAGyYA
ZABlAHMAdABpAG4AYQB0AGkAbwBuAD0AABcmAHcAYQB5AHAAbwBpAG4AdABzAD0AAAsmAGsAZQB5
AD0AAA0mAG0AbwBkAGUAPQAAWSYAZABlAHAAYQByAHQAdQByAGUAXwB0AGkAbQBlAD0AbgBvAHcA
JgB0AHIAYQBmAGYAaQBjAF8AbQBvAGQAZQBsAD0AYgBlAHMAdABfAGcAdQBlAHMAcwAAgJtJAHMA
TgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0
AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQA
aABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUAYQBkAC4AAA9JAG4AcAB1AHQAIAAwAAAXQwBy
AGUAYQB0AGUAZABEAGEAdABlAAAjRABpAHMAdABhAG4AYwBlAEEAUABJAEsAZQB5AF8AUABQAAAl
TQBvAGQAZQBPAGYAVAByAGEAbgBzAHAAbwByAHQAXwBQAFAAAHFTAEMAXwAyAGQANwA0ADYAMQAy
ADAAMgBlADYANgA0ADgAMAA1AGIANwA3ADkANQBmADAAMQA3AGEANgBmADEAOAA1ADgALgBQAHIA
bwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAAFGyYqSjaiFMgJuMELYlj+IA
BCABAQgDIAABBSABARERBCABAQ4FIAEBEWUNBwgSOQ4ODg4OHQURPQQAABE9CSAGAQgICAgICAYg
ARF1ET0FAAEOHQ4EIAEODgUgABKAgQMgAA4GAAESgIkIBSABHQUOBSABAR0FCSADARJFHQgSSQMG
EkUDBh0IBCABDggEIAECCAUgAgEIHAQgARwIAyAAAgcgAgIOEYCRBSABHQgIBSAAEoCVBiABEoCZ
HAUAABKAnQYgARwSgKEIAAESgKURgKkFIAASgK0HIAIBDhKArQi3elxWGTTgiQiJhF3NgIDMkQMG
EhQDBhIYAwYSUQMGEl0DBhJhAwYSIAUgAQESDAQgAQECBSABARE9BCAAEk0FIAEBEk0JIAQBCA4S
RRJJBSABARJRBCAAET0EAAASXQQAABJhBQABARJhBAAAEiADAAABAygADgMoAAIEKAARPQQoABJN
BAgAEl0ECAASYQQIABIgCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgB
AAIAAAAAACgBACNTQ18yZDc0NjEyMDJlNjY0ODA1Yjc3OTVmMDE3YTZmMTg1OAAABQEAAAAAFgEA
EUNvcHlyaWdodCBAICAyMDE2AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZy
YW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQQBAAAAtAAAAM7K774BAAAAkQAA
AGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lz
dGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAPw7
AAAAAAAAAAAAABY8AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIPAAAAAAAAAAAAAAAAF9Db3JE
bGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAAA7AMAAAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBEwDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBD
AF8AMgBkADcANAA2ADEAMgAwADIAZQA2ADYANAA4ADAANQBiADcANwA5ADUAZgAwADEANwBhADYA
ZgAxADgANQA4AAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAw
AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAyAGQANwA0ADYAMQAyADAA
MgBlADYANgA0ADgAMAA1AGIANwA3ADkANQBmADAAMQA3AGEANgBmADEAOAA1ADgALgBkAGwAbAAA
AEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAA
QAAgACAAMgAwADEANgAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAA
AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfADIAZAA3ADQA
NgAxADIAMAAyAGUANgA2ADQAOAAwADUAYgA3ADcAOQA1AGYAMAAxADcAYQA2AGYAMQA4ADUAOAAu
AGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwAyAGQANwA0ADYA
MQAyADAAMgBlADYANgA0ADgAMAA1AGIANwA3ADkANQBmADAAMQA3AGEANgBmADEAOAA1ADgAAAA0
AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAOAAIAAEA
QQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAACg8AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_2d7461202e664805b7795f017a6f1858</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::CreatedDate,$Project::ModeOfTransport_PP,$Project::DistanceAPIKey_PP</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="1">
                    <arrayElement
                      dataType="System.String">&lt;SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
&lt;SOAP-ENV:Body&gt;
&lt;a1:ScriptBreakpointInfo id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/Microsoft.SqlServer.VSTAHosting/Microsoft.SqlServer.VSTAScriptingLib%2C%20Version%3D12.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D89845dcd8080cc91"&gt;
&lt;Enabled&gt;true&lt;/Enabled&gt;
&lt;File id="ref-3"&gt;main.cs&lt;/File&gt;
&lt;FileLine&gt;132&lt;/FileLine&gt;
&lt;FileColumn&gt;9&lt;/FileColumn&gt;
&lt;/a1:ScriptBreakpointInfo&gt;
&lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum"
                  typeConverter="NOTBROWSABLE">d3a421a2e9835da7896c57cf501d6506</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataShaChecksum"
                  typeConverter="NOTBROWSABLE">4bf999bbf39ab21a1d713dae053cac19863d10e3</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Data Flow Task\Read from Google MAP API.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task\Read from Google MAP API.Inputs[Input 0].Columns[Starting Address]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Starting Address"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Starting Address]"
                      name="Starting Address" />
                    <inputColumn
                      refId="Package\Data Flow Task\Read from Google MAP API.Inputs[Input 0].Columns[Ending Address]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="Ending Address"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Ending Address]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Read from Google MAP API.Inputs[Input 0].Columns[Waypoints]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="1000"
                      cachedName="Waypoints"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Waypoints]" />
                    <inputColumn
                      refId="Package\Data Flow Task\Read from Google MAP API.Inputs[Input 0].Columns[RouteID]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="RouteID"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[RouteID]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Data Flow Task\Read from Google MAP API.Inputs[Input 0]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[URL]"
                      codePage="1252"
                      dataType="str"
                      length="6000"
                      lineageId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[URL]"
                      name="URL" />
                    <outputColumn
                      refId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[TransitMode]"
                      codePage="1252"
                      dataType="str"
                      length="20"
                      lineageId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[TransitMode]"
                      name="TransitMode" />
                    <outputColumn
                      refId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[CreatedDate]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[CreatedDate]"
                      name="CreatedDate" />
                    <outputColumn
                      refId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[DirectionsResponseXMLString]"
                      dataType="nText"
                      lineageId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0].Columns[DirectionsResponseXMLString]"
                      name="DirectionsResponseXMLString" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\Read Source and Destination address from Excel"
              componentClassID="Microsoft.FlatFileSource"
              contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Flat File Source"
              localeId="1033"
              name="Read Source and Destination address from Excel"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether zero-length columns are treated as null."
                  name="RetainNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                  name="FileNameColumnName"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\Read Source and Destination address from Excel.Connections[FlatFileConnection]"
                  connectionManagerID="{6ECEC825-E072-4A17-8550-1401369F1AE5}:external"
                  connectionManagerRefId="Project.ConnectionManagers[Fetch Address from CSV File]"
                  name="FlatFileConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output]"
                  name="Flat File Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Starting Address]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].ExternalColumns[Starting Address]"
                      length="50"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Starting Address]"
                      name="Starting Address"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Ending Address]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].ExternalColumns[Ending Address]"
                      length="50"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Ending Address]"
                      name="Ending Address"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Waypoints]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].ExternalColumns[Waypoints]"
                      length="1000"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[Waypoints]"
                      name="Waypoints"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[RouteID]"
                      codePage="1252"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].ExternalColumns[RouteID]"
                      length="50"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].Columns[RouteID]"
                      name="RouteID"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].ExternalColumns[Starting Address]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="Starting Address" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].ExternalColumns[Ending Address]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="Ending Address" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].ExternalColumns[Waypoints]"
                      codePage="1252"
                      dataType="str"
                      length="1000"
                      name="Waypoints" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output].ExternalColumns[RouteID]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="RouteID" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Error Output]"
                  isErrorOut="true"
                  name="Flat File Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      codePage="1252"
                      dataType="text"
                      description="Flat File Source Error Output Column"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      name="Flat File Source Error Output Column" />
                    <outputColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[Flat File Source Output]"
              endId="Package\Data Flow Task\Read from Google MAP API.Inputs[Input 0]"
              name="Flat File Source Output"
              startId="Package\Data Flow Task\Read Source and Destination address from Excel.Outputs[Flat File Source Output]" />
            <path
              refId="Package\Data Flow Task.Paths[Output 0]"
              endId="Package\Data Flow Task\Call SP for each address.Inputs[OLE DB Command Input]"
              name="Output 0"
              startId="Package\Data Flow Task\Read from Google MAP API.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="150,42"
          Id="Package\Data Flow Task"
          TopLeft="153.142859750864,153.552943329993" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="216,42"
          Id="Package\Data Flow Task\Read from Google MAP API"
          TopLeft="110.730160615884,150.964707606887" />
        <NodeLayout
          Size="226,42"
          Id="Package\Data Flow Task\Call SP for each address"
          TopLeft="150.857145426224,258.164709503015" />
        <NodeLayout
          Size="307,42"
          Id="Package\Data Flow Task\Read Source and Destination address from Excel"
          TopLeft="110.857144745029,78.3058834511516" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[Output 0]"
          TopLeft="218.730160615884,192.964707606887">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="45.12698481034,65.200001896128"
              Start="0,0"
              End="45.12698481034,57.700001896128">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.600000948064" />
                  <mssgle:CubicBezierSegment
                    Point1="0,28.600000948064"
                    Point2="0,32.600000948064"
                    Point3="4,32.600000948064" />
                  <mssgle:LineSegment
                    End="41.12698481034,32.600000948064" />
                  <mssgle:CubicBezierSegment
                    Point1="41.12698481034,32.600000948064"
                    Point2="45.12698481034,32.600000948064"
                    Point3="45.12698481034,36.600000948064" />
                  <mssgle:LineSegment
                    End="45.12698481034,57.700001896128" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[Flat File Source Output]"
          TopLeft="264.357144745029,120.305883451152">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-45.626984129145,30.6588241557354"
              Start="0,0"
              End="-45.626984129145,23.1588241557354">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,11.3294120778677" />
                  <mssgle:CubicBezierSegment
                    Point1="0,11.3294120778677"
                    Point2="0,15.3294120778677"
                    Point3="-4,15.3294120778677" />
                  <mssgle:LineSegment
                    End="-41.626984129145,15.3294120778677" />
                  <mssgle:CubicBezierSegment
                    Point1="-41.626984129145,15.3294120778677"
                    Point2="-45.626984129145,15.3294120778677"
                    Point3="-45.626984129145,19.3294120778677" />
                  <mssgle:LineSegment
                    End="-45.626984129145,23.1588241557354" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>